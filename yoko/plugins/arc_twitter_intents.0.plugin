a:11:{s:4:"name";s:19:"arc_twitter_intents";s:6:"status";s:1:"1";s:6:"author";s:11:"Andy Carter";s:10:"author_uri";s:31:"http://redhotchilliproject.com/";s:7:"version";s:7:"1.0-dev";s:11:"description";s:19:"Twitter Web Intents";s:4:"help";s:4769:"	<h1 class="title"><span class="caps">TXP</span> Tweet Intents</h1>

	<p>arc_twitter_intents requires arc_twitter v3 or higher to work.</p>

	<h2 class="section">The arc_twitter_intent_follow tag</h2>

	<h3>Syntax</h3>

	<p>&lt;txp:arc_twitter_intent_follow&gt;Follow&lt;/txp:arc_twitter_intent_follow&gt;</p>

	<h3>Usage</h3>

	<table>
		<tr>
			<th>Attribute</th>
			<th>Description</th>
			<th>Default</th>
			<th>Example</th>
		</tr>
		<tr>
			<td>user</td>
			<td>Twitter user name to follow</td>
			<td> <em>arc_twitter username</em></td>
			<td>user=&quot;drmonkeyninja&quot;</td>
		</tr>
		<tr>
			<td>user_id</td>
			<td>Twitter user id to follow (overrides the user attribute)</td>
			<td> <em>arc_twitter username</em></td>
			<td>user=&quot;drmonkeyninja&quot;</td>
		</tr>
	</table>

	<h2 class="section">The arc_twitter_intent_favorite tag</h2>

	<h3>Syntax</h3>

	<p>&lt;txp:arc_twitter_intent_favorite&gt;Favorite&lt;/txp:arc_twitter_intent_favorite&gt;</p>

	<h3>Usage</h3>

	<table>
		<tr>
			<th>Attribute</th>
			<th>Description</th>
			<th>Default</th>
			<th>Example</th>
		</tr>
		<tr>
			<td>id</td>
			<td>Tweet id to favourite</td>
			<td> <em>article&#8217;s associated tweet from arc_twitter</em></td>
		</tr>
		<tr>
			<td>user</td>
			<td>Twitter user name related to tweet</td>
			<td> <em>arc_twitter username</em></td>
			<td>user=&quot;drmonkeyninja&quot;</td>
		</tr>
		<tr>
			<td>related</td>
			<td>Comma separated list of related Twitter users to recommend following</td>
			<td> <em>unset</em></td>
			<td>related=&quot;textpattern, twitter&quot;</td>
		</tr>
	</table>

	<h2 class="section">The arc_twitter_intent_retweet tag</h2>

	<h3>Syntax</h3>

	<p>&lt;txp:arc_twitter_intent_retweet&gt;Retweet&lt;/txp:arc_twitter_intent_retweet&gt;</p>

	<h3>Usage</h3>

	<table>
		<tr>
			<th>Attribute</th>
			<th>Description</th>
			<th>Default</th>
			<th>Example</th>
		</tr>
		<tr>
			<td>id</td>
			<td>Tweet id to retweet</td>
			<td> <em>article&#8217;s associated tweet from arc_twitter</em></td>
		</tr>
		<tr>
			<td>user</td>
			<td>Twitter user name related to tweet</td>
			<td> <em>arc_twitter username</em></td>
			<td>user=&quot;drmonkeyninja&quot;</td>
		</tr>
		<tr>
			<td>related</td>
			<td>Comma separated list of related Twitter users to recommend following</td>
			<td> <em>unset</em></td>
			<td>related=&quot;textpattern, twitter&quot;</td>
		</tr>
	</table>

	<h2 class="section">The arc_twitter_intent_reply tag</h2>

	<h3>Syntax</h3>

	<p>&lt;txp:arc_twitter_intent_reply&gt;Reply&lt;/txp:arc_twitter_intent_reply&gt;</p>

	<h3>Usage</h3>

	<table>
		<tr>
			<th>Attribute</th>
			<th>Description</th>
			<th>Default</th>
			<th>Example</th>
		</tr>
		<tr>
			<td>id</td>
			<td>Tweet id to reply to</td>
			<td> <em>article&#8217;s associated tweet from arc_twitter</em></td>
		</tr>
		<tr>
			<td>user</td>
			<td>Twitter user name related to tweet (used for recommended accounts)</td>
			<td> <em>arc_twitter username</em></td>
			<td>user=&quot;drmonkeyninja&quot;</td>
		</tr>
		<tr>
			<td>related</td>
			<td>Comma separated list of related Twitter users to recommend following</td>
			<td> <em>unset</em></td>
			<td>related=&quot;textpattern, twitter&quot;</td>
		</tr>
		<tr>
			<td>text</td>
			<td>Set some text for the reply tweet</td>
			<td> <em>unset</em></td>
		</tr>
	</table>

	<h2 class="section">Language</h2>

	<p>All the arc_twitter_intents tags have an optional &#8220;lang&#8221; attribute for setting the language of the Twitter interface. The following values/languages are available:-</p>

	<table>
		<tr>
			<th>Attribute value</th>
			<th>Language</th>
		</tr>
		<tr>
			<td>en</td>
			<td>English (default)</td>
		</tr>
		<tr>
			<td>fr</td>
			<td>French</td>
		</tr>
		<tr>
			<td>it</td>
			<td>Italian</td>
		</tr>
		<tr>
			<td>es</td>
			<td>Spanish</td>
		</tr>
		<tr>
			<td>ko</td>
			<td>Korean</td>
		</tr>
		<tr>
			<td>jp</td>
			<td>Japanese</td>
		</tr>
	</table>

	<h2 class="section">JavaScript</h2>

	<p>All the arc_twitter_intents tags have two optional attributes that relate to the inclusion of the Twitter widget JavaScript.</p>

	<table>
		<tr>
			<th>Attribute</th>
			<th>Description</th>
			<th>Default</th>
			<th>Example</th>
		</tr>
		<tr>
			<td>include_js</td>
			<td>Include the Twitter widget JavaScript</td>
			<td>true</td>
			<td>include_js=&quot;false&quot;</td>
		</tr>
		<tr>
			<td>optimise_js</td>
			<td>Optimise the JavaScript by using a local script rather than that hosted on the Twitter site</td>
			<td>false</td>
			<td>optimise_js=&quot;true&quot;</td>
		</tr>
	</table>

	<p><span class="caps">TXP</span> Tweet will only include the widget JavaScript once on a page regardless of the number of tags used that include it.</p>

";s:4:"code";s:4498:"global $prefs,$txpcfg;

// arc_twitter_intents requires arc_twitter v3 or higher
require_plugin('arc_twitter');

function arc_twitter_intent_follow($atts, $thing=null)
{
    global $prefs;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'user_id'   => '',
        'lang'      => '',
        'include_js'=> true,
        'optimise_js' => false,
        'class'     => ''
    ),$atts));

    $q = ($user_id) ? 'user_id='.$user_id : 'screen_name='.$user;

    $lang = _arc_twitter_intents_lang($lang);
    $q .= '&amp;lang='.urlencode($lang);

    $thing = ($thing===null) ? 'Follow' : parse($thing);

    $html = href($thing,'http://twitter.com/intent/user?'.$q
      , ' class="'.$class.'"');

    $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

    return $js.$html;
}

function arc_twitter_intent_favorite($atts, $thing=null)
{
    global $prefs, $thisarticle;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'related'   => '',
        'include_js'=> true,
        'optimise_js' => false,
        'lang'      => '',
        'id'        => '',
        'class'     => ''
    ),$atts));

    if ($id || $thisarticle['thisid']) {

      $q = 'related='.$user;
      if ($related) $q .= urlencode(($q?',':'related=').$related);

      if (!$id) {
        $row = safe_row("tweet_id"
        , 'arc_twitter', "article_id={$thisarticle['thisid']}");
        if (!$id = $row['tweet_id']) return false;
      }

      $q .= '&amp;tweet_id='.$id;

      $lang = _arc_twitter_intents_lang($lang);
      $q .= '&amp;lang='.urlencode($lang);

      $thing = ($thing===null) ? 'Favorite' : parse($thing);

      $html = href($thing,'http://twitter.com/intent/favorite?'.$q
        , ' class="'.$class.'"');

      $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

      return $js.$html;

    }

    return false;
}

function arc_twitter_intent_retweet($atts, $thing=null)
{
    global $prefs, $thisarticle;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'related'   => '',
        'include_js'=> true,
        'optimise_js' => false,
        'lang'      => '',
        'id'        => '',
        'class'     => ''
    ),$atts));

    if ($id || $thisarticle['thisid']) {

      $q = 'related='.$user;
      if ($related) $q .= urlencode(($q?',':'related=').$related);

      if (!$id) {
        $row = safe_row("tweet_id"
        , 'arc_twitter', "article_id={$thisarticle['thisid']}");
        if (!$id = $row['tweet_id']) return false;
      }

      $q .= '&amp;tweet_id='.$id;

      $lang = _arc_twitter_intents_lang($lang);
      $q .= '&amp;lang='.urlencode($lang);

      $thing = ($thing===null) ? 'Retweet' : parse($thing);

      $html = href($thing,'http://twitter.com/intent/retweet?'.$q
        , ' class="'.$class.'"');

      $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

      return $js.$html;

    }

    return false;
}

function arc_twitter_intent_reply($atts, $thing=null)
{
    global $prefs, $thisarticle;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'related'   => '',
        'text'      => '',
        'include_js'=> true,
        'optimise_js' => false,
        'lang'      => '',
        'id'        => '',
        'class'     => ''
    ),$atts));

    if ($id || $thisarticle['thisid']) {

      if (!$id) {
        $row = safe_row("tweet_id"
        , 'arc_twitter', "article_id={$thisarticle['thisid']}");
        if (!$id = $row['tweet_id']) return false;
      }

      $q = 'in_reply_to='.$id;

      if ($user) {
        $q .= '&amp;related='.urlencode($user);
      }
      if ($related) {
        $q .= urlencode(($user?',':'&related=').$related);
      }
      if ($text) {
        $q .= '&amp;text='.urlencode($text);
      }

      $lang = _arc_twitter_intents_lang($lang);
      $q .= '&amp;lang='.urlencode($lang);

      $thing = ($thing===null) ? 'Reply' : parse($thing);

      $html = href($thing,'http://twitter.com/intent/tweet?'.$q
        , ' class="'.$class.'"');

      $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

      return $js.$html;

    }

    return false;
}

/*
 * Set the intent language
 */
function _arc_twitter_intents_lang($lang='en')
{
  $lang = strtolower($lang);
  $langs = array('en', 'it', 'es', 'fr', 'ko', 'jp');
  return (in_array($lang,$langs)) ? $lang : 'en';
}

";s:12:"code_restore";s:4498:"global $prefs,$txpcfg;

// arc_twitter_intents requires arc_twitter v3 or higher
require_plugin('arc_twitter');

function arc_twitter_intent_follow($atts, $thing=null)
{
    global $prefs;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'user_id'   => '',
        'lang'      => '',
        'include_js'=> true,
        'optimise_js' => false,
        'class'     => ''
    ),$atts));

    $q = ($user_id) ? 'user_id='.$user_id : 'screen_name='.$user;

    $lang = _arc_twitter_intents_lang($lang);
    $q .= '&amp;lang='.urlencode($lang);

    $thing = ($thing===null) ? 'Follow' : parse($thing);

    $html = href($thing,'http://twitter.com/intent/user?'.$q
      , ' class="'.$class.'"');

    $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

    return $js.$html;
}

function arc_twitter_intent_favorite($atts, $thing=null)
{
    global $prefs, $thisarticle;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'related'   => '',
        'include_js'=> true,
        'optimise_js' => false,
        'lang'      => '',
        'id'        => '',
        'class'     => ''
    ),$atts));

    if ($id || $thisarticle['thisid']) {

      $q = 'related='.$user;
      if ($related) $q .= urlencode(($q?',':'related=').$related);

      if (!$id) {
        $row = safe_row("tweet_id"
        , 'arc_twitter', "article_id={$thisarticle['thisid']}");
        if (!$id = $row['tweet_id']) return false;
      }

      $q .= '&amp;tweet_id='.$id;

      $lang = _arc_twitter_intents_lang($lang);
      $q .= '&amp;lang='.urlencode($lang);

      $thing = ($thing===null) ? 'Favorite' : parse($thing);

      $html = href($thing,'http://twitter.com/intent/favorite?'.$q
        , ' class="'.$class.'"');

      $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

      return $js.$html;

    }

    return false;
}

function arc_twitter_intent_retweet($atts, $thing=null)
{
    global $prefs, $thisarticle;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'related'   => '',
        'include_js'=> true,
        'optimise_js' => false,
        'lang'      => '',
        'id'        => '',
        'class'     => ''
    ),$atts));

    if ($id || $thisarticle['thisid']) {

      $q = 'related='.$user;
      if ($related) $q .= urlencode(($q?',':'related=').$related);

      if (!$id) {
        $row = safe_row("tweet_id"
        , 'arc_twitter', "article_id={$thisarticle['thisid']}");
        if (!$id = $row['tweet_id']) return false;
      }

      $q .= '&amp;tweet_id='.$id;

      $lang = _arc_twitter_intents_lang($lang);
      $q .= '&amp;lang='.urlencode($lang);

      $thing = ($thing===null) ? 'Retweet' : parse($thing);

      $html = href($thing,'http://twitter.com/intent/retweet?'.$q
        , ' class="'.$class.'"');

      $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

      return $js.$html;

    }

    return false;
}

function arc_twitter_intent_reply($atts, $thing=null)
{
    global $prefs, $thisarticle;

    extract(lAtts(array(
        'user'      => $prefs['arc_twitter_user'],
        'related'   => '',
        'text'      => '',
        'include_js'=> true,
        'optimise_js' => false,
        'lang'      => '',
        'id'        => '',
        'class'     => ''
    ),$atts));

    if ($id || $thisarticle['thisid']) {

      if (!$id) {
        $row = safe_row("tweet_id"
        , 'arc_twitter', "article_id={$thisarticle['thisid']}");
        if (!$id = $row['tweet_id']) return false;
      }

      $q = 'in_reply_to='.$id;

      if ($user) {
        $q .= '&amp;related='.urlencode($user);
      }
      if ($related) {
        $q .= urlencode(($user?',':'&related=').$related);
      }
      if ($text) {
        $q .= '&amp;text='.urlencode($text);
      }

      $lang = _arc_twitter_intents_lang($lang);
      $q .= '&amp;lang='.urlencode($lang);

      $thing = ($thing===null) ? 'Reply' : parse($thing);

      $html = href($thing,'http://twitter.com/intent/tweet?'.$q
        , ' class="'.$class.'"');

      $js = ($include_js) ? _arc_twitter_widget_js($optimise_js?true:false) : '';

      return $js.$html;

    }

    return false;
}

/*
 * Set the intent language
 */
function _arc_twitter_intents_lang($lang='en')
{
  $lang = strtolower($lang);
  $langs = array('en', 'it', 'es', 'fr', 'ko', 'jp');
  return (in_array($lang,$langs)) ? $lang : 'en';
}

";s:8:"code_md5";s:32:"13b516b27d89497e43e37f6b01795a3c";s:4:"type";s:1:"0";}